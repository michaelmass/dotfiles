# This script is automatically generated by vfox. It takes care of environment setup in Nushell.

# Make sure this script file is up to date when opening a new shell.
^'/opt/homebrew/bin/vfox' activate nushell $nu.default-config-dir | ignore

export-env {
  # This function updates environment variables based on the output of the "vfox env" command.
  def --env updateVfoxEnvironment [] {
    let envData = (^'/opt/homebrew/bin/vfox' env -s nushell --full | from json)
    if ($envData | is-empty) {
      return
    }
    load-env $envData.envsToSet
    hide-env ...$envData.envsToUnset
  }

  # Add a pre_prompt hook that calls the above "updateVfoxEnvironment" function.
  $env.config = ($env.config | upsert hooks.pre_prompt {
    let currentValue = ($env.config | get -o hooks.pre_prompt)
    if $currentValue == null {
      [{updateVfoxEnvironment}]
    } else {
      $currentValue | append {updateVfoxEnvironment}
    }
  })

  # Tell vfox we're using Nushell and give it the current process ID.
  $env.__VFOX_SHELL = 'nushell'
  $env.__VFOX_PID = $nu.pid

  # Have vfox clean up old temp files.
  ^'/opt/homebrew/bin/vfox' env --cleanup | ignore

  # Perform an initial update of the environment variables.
  updateVfoxEnvironment
}
